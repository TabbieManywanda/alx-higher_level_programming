The ``0-add_integer`` module
============================

How to use 0-add_integer.py

============================
Has only one function called ``add_integer`` which returns the sum
of it's arguments.

Arguments passed have to be int or float but the result is int.

Importing the function:
>>> add_integer = __import__('0-add_integer').add_integer

Checking for int arguments:
>>> add_integer(5, 6)
11

Checking for negative int arguments:
>>> add_integer(-5, 6)
1
>>> add_integer(5, -6)
-1
>>> add_integer(-5, -6)
-11

Checking for float arguments:
>>> add_integer(2.1, 0.9)
2
>>> add_integer(2, 0.9)
2
>>> add_integer(2.1, 2)
4

Checking for negative float arguments:
>>> add_integer(-2.1, 0.9)
-2
>>> add_integer(2.1, -0.9)
2
>>> add_integer(-2.1, -0.9)
-2

Checking for boolean arguments:
>>> add_integer(1, True)
Traceback (most recent call last):
TypeError: b must be an integer
>>> add_integer(True, 1)
Traceback (most recent call last):
TypeError: a must be an integer

Checking for string arguments:
>>> add_integer(1, "string")
Traceback (most recent call last):
TypeError: b must be an integer
>>> add_integer("string", 1)
Traceback (most recent call last):
TypeError: a must be an integer
>>> add_integer("string", "string")
Traceback (most recent call last):
TypeError: a must be an integer

Checking for 1 argument passed:
>>> add_integer(6)
104

Checking for no passed arguments:
>>> add_integer()
Traceback (most recent call last):
TypeError: add_integer() missing 1 required positional argument: 'a'

Checking more than 2 arguments passed:
>>> add_integer(1, 2, 3)
Traceback (most recent call last):
TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Checking for complex numbers:
>>> add_integer(1, 3+26j)
Traceback (most recent call last):
TypeError: b must be an integer
>>> add_integer(3+26j, 1)
Traceback (most recent call last):
TypeError: a must be an integer
>>> add_integer(3+26j, 3+26j)
Traceback (most recent call last):
TypeError: a must be an integer
